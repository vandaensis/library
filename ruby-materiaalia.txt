Ruby-oppimateriaalia

http://rubykoans.com
http://tiny.cc/poignantguide

http://ruby-doc.org

Lataa github.com/Eficode/rails-basic ---> tags ja tallenna zip-paketti (ja pura se komennolla unzip)

ja hakemistossa "bundle install" -komento, joka hakee

aja "rake db:migrate"
aja "rails console" (quit lopettaa sen)


merkkijono: "abc" tai 'abc'
"abc".size() (sulkuja ei tarvita, jos sisällä ei ole mitään)

variable = "abc"
"variable is: #{variable}"


library(-ohjelman) lib-kansioon tehtiin uusi luokkatiedosto isbn_validator.rb

muutetaan config-kansion tiedostoa application.rb poistamalla kommentointi riviltä

config.autoload_paths += %W(#{config.root}/lib)

ja muuttamalla sen lopussa (extras?) tilalle kansion nimeksi "lib" kuten yllä.

tehdään uuteen luokkaan initialize-metodi, joka tulostaa sanan initializing.
konsolissa reload! lataa uudelleen kaikki kirjastot

IsbnValidator.new luo uuden instanssin, jonka yhteydessä tulostuu "initializing".

puts "Initializing #{isbn}"
Tehdään initialize-metodiin parametri isbn, joka tulostetaan alustuksen yhteydessä. Uuden olion luonti: IsbnValidator.new("1234")

@muuttuja on luokan yksityinen muuttuja kaikkien luokan metodien käytössä (pelkkä isbn oli parametri vain yhdessä metodissa)

	def isbn
		return @isbn
	end

	def isbn=(isbn)
		@isbn = isbn
	end

Nämä set- ja get-metodit voi korvata automaattisesti rivillä:

attr_accessor :isbn

tai vain toinen
attr_reader :isbn
attr_writer :isbn 


symbol alkaa kaksoispisteellä :
:isbn

muistuttaa merkkijonoa (String-luokan erikoistapaus)

taulukossa voi olla erityyppisiä tietoja [1, "abd" ,4.0]

taulukon loppuun lisääminen: a << :new_item

taulukoiden yhdistäminen [1,2] + [3,4] = [1,2,3,4]

hash luodaan näin (avain ja arvo voivat olla mitä tahansa tyyppiä) {"abc" => 3, "def" => 4}

uusi tapa hash-käsittelyyn kirjaimilla versiosta 1.9. alkaen on kaksoispiste
{abc: 3, deff: 4}
(def on varattu sana)


if voi olla myös true-tapauksen suorituslauseen lopussa:
puts "yes" if a == 1

if -- elseif -- else

AND on &&, OR on ||, NOT on ! (myös !=), if not --> unless

puts "It is not two" unless a == 2

Blokki voi olla do -- end tai { -- } ja sisältää koodia:

3.times do
	puts "Hello"
end

tulostaa kolme riviä Helloa.

3.times do |number|
	puts "Hello #{number}"
end

tulostaa myös jokaisen toiston numeron (alkaen 0:sta)

Yleensä luuppeja ei käytetä, vaan käytetään näitä blokkeja. (for, while ja do ovat kuitenkin käytettävissä, mutta niitä käytetään hyvin harvoin)

[1,2,3,4].each do |i|
	puts i
end

tulostaa taulukon sisällön. Voi käyttää myös hash-taulukkoon. (each do |k,v|)

[1,2,3,4].map do |i|
	i * 2
end

palauttaa uuden taulukon, jossa alkuperäisen jokainen numero on kerrotuna kahdella


File.open("/Users/train/.bash_profile") do |f|
	f.each_line { |line| puts line }
end

tulostaa tiedoston jokaisen rivin. Tiedostoa ei tarvitse erikseen sulkea.

-------------------
3. viikko

Testaus:
test/unit-hakemistoon luodaan testattavaa .rb-kooditiedostoa vastaava tiedosto, jonka nimi päättyy _test.rb
isbn_validator_test.rb

testit ajetaan komennolla:
rake test:units

testaustulokset tulevat näkyviin.


rake db:migrate
(rake db:rollback palauttaa takaisin, kumoaa edellisen komennon)

rake -T db kertoo tietokantaan liittyvät toiminnot
rake db:drop deletoi tietokannan

Migratella rails luo automaattisesti (ohjeiden mukaan) tietokantataulut ja osaa myös poistaa ne.
Rails osaa tällä tavalla käyttää mitä tahansa tietokantaa (ohjelmakoodia muuttamatta).

rails c 
avaa rails-konsolin

rails generate model Book title:string authors:string description:text
tuo luo luokan Book (tai modelin) ja samalla db/migrate-kansioon tietokantataulun luomiskomennot, 
sekä myös testaustiedoston!

Tämä on nimeltään Active records association. b = Book.new luo uuden olion, joka tallennetaan tietokantaan komennolla b.save

test/fixtures sisältää tiedoston books.yml (monikko!)

se sisältää Book-modelin testitapauksissa käytettäviä tietokannan rivejä (=olioita). Esim:
steppenwolf:
  title: Steppenwolf
  authors: Hermann Hesse
  description: A great book

näitä voi käyttää testitapauksissa (book_test.rb) näin:
	test "a book without a title should not be valid" do
		@book = books(:steppenwolf)
		@book.title = ''
		assert @book.invalid?
	end

tuossa muutettiin steppenwolfin otsikko tyhjäksi, jolloin testi ei saisi onnistua hyväksytysti. book.rb sisältää:
class Book < ActiveRecord::Base
  
  validates :title, presence: true, uniqueness: true
  validates	:authors, presence: true	

end

eli tehdään halutut tarkistukset automaattisesti.

