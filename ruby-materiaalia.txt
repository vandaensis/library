Ruby-oppimateriaalia

http://rubykoans.com
http://tiny.cc/poignantguide

http://ruby-doc.org

Lataa github.com/Eficode/rails-basic ---> tags ja tallenna zip-paketti (ja pura se komennolla unzip)

ja hakemistossa "bundle install" -komento, joka hakee

aja "rake db:migrate"
aja "rails console" (quit lopettaa sen)


merkkijono: "abc" tai 'abc'
"abc".size() (sulkuja ei tarvita, jos sisällä ei ole mitään)

variable = "abc"
"variable is: #{variable}"


library(-ohjelman) lib-kansioon tehtiin uusi luokkatiedosto isbn_validator.rb

muutetaan config-kansion tiedostoa application.rb poistamalla kommentointi riviltä

config.autoload_paths += %W(#{config.root}/lib)

ja muuttamalla sen lopussa (extras?) tilalle kansion nimeksi "lib" kuten yllä.

tehdään uuteen luokkaan initialize-metodi, joka tulostaa sanan initializing.
konsolissa reload! lataa uudelleen kaikki kirjastot

IsbnValidator.new luo uuden instanssin, jonka yhteydessä tulostuu "initializing".

puts "Initializing #{isbn}"
Tehdään initialize-metodiin parametri isbn, joka tulostetaan alustuksen yhteydessä. Uuden olion luonti: IsbnValidator.new("1234")

@muuttuja on luokan yksityinen muuttuja kaikkien luokan metodien käytössä (pelkkä isbn oli parametri vain yhdessä metodissa)

	def isbn
		return @isbn
	end

	def isbn=(isbn)
		@isbn = isbn
	end

Nämä set- ja get-metodit voi korvata automaattisesti rivillä:

attr_accessor :isbn

tai vain toinen
attr_reader :isbn
attr_writer :isbn 


symbol alkaa kaksoispisteellä :
:isbn

muistuttaa merkkijonoa (String-luokan erikoistapaus)

taulukossa voi olla erityyppisiä tietoja [1, "abd" ,4.0]

taulukon loppuun lisääminen: a << :new_item

taulukoiden yhdistäminen [1,2] + [3,4] = [1,2,3,4]

hash luodaan näin (avain ja arvo voivat olla mitä tahansa tyyppiä) {"abc" => 3, "def" => 4}

uusi tapa hash-käsittelyyn kirjaimilla versiosta 1.9. alkaen on kaksoispiste
{abc: 3, deff: 4}
(def on varattu sana)


if voi olla myös true-tapauksen suorituslauseen lopussa:
puts "yes" if a == 1

if -- elseif -- else

AND on &&, OR on ||, NOT on ! (myös !=), if not --> unless

puts "It is not two" unless a == 2

Blokki voi olla do -- end tai { -- } ja sisältää koodia:

3.times do
	puts "Hello"
end

tulostaa kolme riviä Helloa.

3.times do |number|
	puts "Hello #{number}"
end

tulostaa myös jokaisen toiston numeron (alkaen 0:sta)

Yleensä luuppeja ei käytetä, vaan käytetään näitä blokkeja. (for, while ja do ovat kuitenkin käytettävissä, mutta niitä käytetään hyvin harvoin)

[1,2,3,4].each do |i|
	puts i
end

tulostaa taulukon sisällön. Voi käyttää myös hash-taulukkoon. (each do |k,v|)

[1,2,3,4].map do |i|
	i * 2
end

palauttaa uuden taulukon, jossa alkuperäisen jokainen numero on kerrotuna kahdella


File.open("/Users/train/.bash_profile") do |f|
	f.each_line { |line| puts line }
end

tulostaa tiedoston jokaisen rivin. Tiedostoa ei tarvitse erikseen sulkea.

-------------------
3. viikko

Testaus:
test/unit-hakemistoon luodaan testattavaa .rb-kooditiedostoa vastaava tiedosto, jonka nimi päättyy _test.rb
isbn_validator_test.rb

testit ajetaan komennolla:
rake test:units

testaustulokset tulevat näkyviin.


rake db:migrate
(rake db:rollback palauttaa takaisin, kumoaa edellisen komennon)

rake -T db kertoo tietokantaan liittyvät toiminnot
rake db:drop deletoi tietokannan

Migratella rails luo automaattisesti (ohjeiden mukaan) tietokantataulut ja osaa myös poistaa ne.
Rails osaa tällä tavalla käyttää mitä tahansa tietokantaa (ohjelmakoodia muuttamatta).

rails c 
avaa rails-konsolin

rails generate model Book title:string authors:string description:text
tuo luo luokan Book (tai modelin) ja samalla db/migrate-kansioon tietokantataulun luomiskomennot, 
sekä myös testaustiedoston!

Tämä on nimeltään Active records association. b = Book.new luo uuden olion, joka tallennetaan tietokantaan komennolla b.save

test/fixtures sisältää tiedoston books.yml (monikko!)

se sisältää Book-modelin testitapauksissa käytettäviä tietokannan rivejä (=olioita). Esim:
steppenwolf:
  title: Steppenwolf
  authors: Hermann Hesse
  description: A great book

näitä voi käyttää testitapauksissa (book_test.rb) näin:
	test "a book without a title should not be valid" do
		@book = books(:steppenwolf)
		@book.title = ''
		assert @book.invalid?
	end

tuossa muutettiin steppenwolfin otsikko tyhjäksi, jolloin testi ei saisi onnistua hyväksytysti. book.rb sisältää:
class Book < ActiveRecord::Base
  
  validates :title, presence: true, uniqueness: true
  validates	:authors, presence: true	

end

eli tehdään halutut tarkistukset automaattisesti.

ruby-konsoli käyttää developer-tietokantaa, rake test:units käyttää eri tietokantaa (testitietokanta).


Lisätään ISBN active records -tietoihin:
rails generate migration AddIsbnToBooks isbn:string

Rails luo uuden tiedoston db/migrate-hakemistoon (nimi päättyy aikaleiman jälkeen: _add_isbn_to_books.rb)

class AddIsbnToBooks < ActiveRecord::Migration
  def change
    add_column :books, :isbn, :string
  end
end

tuo change tarkoittaa, että ruby tai rails osaa tehdä myös toisinpäin, eli poistaa sarakkeen.



Lisätään tarkistuksia, käyttäen omaa validaattoria isbn:n tarkistamiseen:

class Book < ActiveRecord::Base
  
  validates :title, presence: true, uniqueness: true # ja esim vielä vaikka  :length: { in: 3..200 }
  # voisi olla myös:  validates :title, :authors, presence: ...

	validates	:authors, presence: true	

	validates_with IsbnValidator

end

Myös validaattori kirjoitettiin uudelleen... ja sen vuoksi myös testitapaukset piti muokata.

test "a string with letters other than x is not valid" do
    assert !IsbnValidator.new.valid?("951-98548-9-p")
  end


Testitiedostoon voi luoda instanssimuuttujan, jolloin kaikissa testeissä voi käyttää sitä:

	setup do
		@book = books(:steppenwolf)
	end

setup-blokissa voi luoda kaikki tarvittavat muuttujat joita käytetään testeissä (joiden kirjoittaminen on siten helpompaa)


Kotitehtävä:

http://railsforzombies.org/

tee level 1 tehtävät active recordista.

-------------------------------------------
4. oppitunti

kun githubista ladattu .zip-tiedosto ja purettu se library-kansioon, aja siellä:

bundle install
rake db:migrate


REST:
- /books on resurssi (http://libraryapplication/books)

verbi + resurssi

create --> POST
readn many ---> GET /book
read one ----> GET /book/3
update ---> PUT /books/3

log in --> POST /session
log out ---> DELETE /session

RESTful on resurssien representation


Ladattiin campfiren keskustelusta lisää kirjoja sisältävä books.yaml -tiedosto
päivitettiin sisältö sinne kopioimalla ja tallennnettiin.

aja:
rake db:fixtures:load

Lisättiin routes.db -tiedostoon (config-kansiossa) rivi:

resources :books

ja ajetaan k
omento

rake routes

joka listaa kaikki resurssit, jotka luotiin automaattisesti book:ille (CRUD).
Se näyttää myös, mitä toimintoon tarvitaan (ja tehdään ne seuraavaksi).


ajetaan:

rake generate controller books

se luo controlleritiedostoja, helperin, testejä, css:ää ym.

test/functional -kansioon luotiin books_controller_test.rb

se testaa kaiken view:hun liittyvän, periyttää sen ActionController::TestCase:sta

assert_response :success #tarkoittaa, että http-pyyntö onnistui (http-koodi 200 tms)

assert assigns(:books) # varmistaa, että on olemassa instance variable :books

testataan komennolla: (vain tämä toiminnallinen osa)

rake test:functionals

(virhe tulee, koska ei ole vielä toteutusta...)

tehdään books_controller.rb tiedostoon:

def index
	@books = Book.all
end

ja lisätään tiedosto index.html.erb -tiedosto views/books -kansioon


rails s
tai: rails server käynnistää serverin

Lisätään index.html.erb-tiedostoon kirjojen nimet ja tekijät tulostava koodi html:n kera:

<h1>Books</h1>

<ul>
  <% @books.each do |book| %>
    <li>
      <strong><%= book.title %></strong>
      by <%= book.authors %>
    </li>
  <% end %>
</ul>


Toimii kuten PHP tai JSP...

kirjoitetaan komento

rake routes

tulostuu:

books GET    /books(.:format)          {:action=>"index", :controller=>"books"}
          POST   /books(.:format)          {:action=>"create", :controller=>"books"}
 new_book GET    /books/new(.:format)      {:action=>"new", :controller=>"books"}
edit_book GET    /books/:id/edit(.:format) {:action=>"edit", :controller=>"books"}
     book GET    /books/:id(.:format)      {:action=>"show", :controller=>"books"}
          PUT    /books/:id(.:format)      {:action=>"update", :controller=>"books"}
          DELETE /books/:id(.:format)      {:action=>"destroy", :controller=>"books"}
     root        /                         {:controller=>"site", :action=>"index"}

joka neuvoo, mitä resursseja ja verbejä voi käyttää, ja mitä funktioita ne tarvitsevat.
POST tarvitsee metodin create, jonka pitää olla controllerissa books.

link_to lisää linkin elementtiin
book_path(book) hakee yksittäisen kirjan polun

ohjeita:
api.rubyonrails.org


form_for

luo automaattisesti tyhjän lomakkeen, jos saa tyhjän tiedon, tai täytetyn jos olio olemassa jo.

--

dynamic form -gem githubista --> saat lomakkeen kenttien perään virheilmoitukset







